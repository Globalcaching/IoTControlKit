@{
    ViewData["Title"] = "Devices";
}

<div id="recordsList"></div>

<div class="modal fade" id="dialog-editDeviceProperty" tabindex="-1" role="dialog" aria-labelledby="editDevicePropertyLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="editDevicePropertyLabel">@Html.T("Edit Device Property Value")</h4>
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">@Html.T("Close")</span></button>
            </div>
            <div class="modal-body">
                <form role="form" class="form-horizontal">
                    <div class="form-group">
                        <label for="DevicePropertyValue" class="col-sm-3 control-label">
                            @Html.T("Value"):
                        </label>
                        <div class="col-sm-9">
                            <input class="form-control" name="DevicePropertyValue" id="DevicePropertyValue" data-bind='textInput: DevicePropertyValue' />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-check-label col-sm-9 ml-sm-3">
                            <input class="form-check-input" type="checkbox" name="InternalOnly" id="InternalOnly" data-bind='checked: InternalOnly'> @Html.T("Internal only")
                        </label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="saveDeviceProperty()">@Html.T("Apply")</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">@Html.T("Cancel")</button>
            </div>
        </div>
    </div>
</div>

@foreach (var plugin in IoTControlKit.Services.ApplicationService.Instance.Plugins)
{
    @Html.Raw(Html.PluginFile(plugin, "Device", "Index.html"))
}


<script>
    var viewModel = {};
    viewModel.DevicePropertyValue = ko.observable('').extend({ required: "" });
    viewModel.InternalOnly = ko.observable(false);
    viewModel.Name = ko.observable('').extend({ required: "" });
    viewModel.Enabled = ko.observable(true);

@foreach (var plugin in IoTControlKit.Services.ApplicationService.Instance.Plugins)
{
    @Html.Raw(Html.PluginFile(plugin, "Device", "Index.js"))
}

    ko.applyBindings(viewModel);

    var selectedItem;

    function editDeviceProperty(item) {
        selectedItem = item;
        viewModel.DevicePropertyValue(item.Value);
        $('#dialog-editDeviceProperty').appendTo('body').modal();
    }

    function saveDeviceProperty() {
        $.post('@Url.Action("ChangeDevicePropertyValue", "Device")', { id: selectedItem.Id, value: viewModel.DevicePropertyValue(), internalOnly: viewModel.InternalOnly()});
    }

    function getDevicePropertiesList(device) {
        var result = document.createElement('div');
        url = "@Url.Action("GetDeviceProperties", "Device", new { id = "1234a" })".replace("1234a", device.Id);
        CreatePagedList(result, url, function (pagedList) {
            pagedList.hideCount();
            pagedList.pageSize = 2000;
            pagedList.getTopPager().disable();
            pagedList.getBottomPager().disable();
            pagedList.addColumn("NormalizedName", "@Html.T("Normalized Name")")
                .itemToHtml(function (item) { return htmlEncode(item.NormalizedName); });
            pagedList.addColumn("Name", "@Html.T("Name")")
                .itemToHtml(function (item) { return htmlEncode(item.Name); });
            pagedList.addColumn("DataType", "@Html.T("Data Type")")
                .itemToHtml(function (item) { return htmlEncode(item.DataType); });
            pagedList.addColumn("Unit", "@Html.T("Unit")")
                .itemToHtml(function (item) { return htmlEncode(item.Unit); });
            pagedList.addColumn("Format", "@Html.T("Format")")
                .itemToHtml(function (item) { return htmlEncode(item.Format); });
            pagedList.addColumn("Value", "@Html.T("Value")")
                .itemToHtml(function (item) { return htmlEncode(item.Value); });
            pagedList.addColumn("Settable", "@Html.T("Settable")")
                .itemToHtml(function (item) { return item.Settable; });
            pagedList.addButton("Edit", "@Html.T("Edit")", "btn btn-primary btn-sm")
                .onclick(function (item) { editDeviceProperty(item); });

            pagedList.refresh();

            CortexxCoreHubInstance.onDataChanged(['DeviceProperty', 'DevicePropertyValue'], result, function () {
                pagedList.refresh();
            });
        });

        return result;
    }

    function getDevicesList(controller) {
        var result = document.createElement('div');
        url = "@Url.Action("GetDevices", "Device", new { id = "1234a" })".replace("1234a", controller.Id);
        CreatePagedList(result, url, function (pagedList) {
            pagedList.addColumn("NormalizedName", "@Html.T("Normalized Name")")
                .itemToHtml(function (item) { return htmlEncode(item.NormalizedName); })
                .onExpandItem(function (item) {
                    return getDevicePropertiesList(item);
                });
            pagedList.addColumn("Name", "@Html.T("Name")")
                .itemToHtml(function (item) { return htmlEncode(item.Name); });
            pagedList.addColumn("DeviceType", "@Html.T("Device Type")")
                .itemToHtml(function (item) { return htmlEncode(item.DeviceType); });

            pagedList.refresh();

            CortexxCoreHubInstance.onDataChanged(['Device'], result, function () {
                pagedList.refresh();
            });
        });

        return result;
    }

    CortexxCoreHubInstance.hubStarted = function () {
        CreatePagedList('#recordsList', "@Url.Action("GetDeviceControllers", "Device")", function (pagedList) {
            recordsList = pagedList;
            pagedList.addColumn("NormalizedName", "@Html.T("Normalized Name")")
                .itemToHtml(function (item) { return htmlEncode(item.NormalizedName); })
                .onExpandItem(function (item) {
                    return getDevicesList(item);
                });
            pagedList.addColumn("Name", "@Html.T("Name")")
                .itemToHtml(function (item) { return htmlEncode(item.Name); });
            pagedList.addColumn("Plugin", "@Html.T("Plugin")")
                .itemToHtml(function (item) { return htmlEncode(item.Plugin); });
            pagedList.addColumn("State", "@Html.T("State")")
                .itemToHtml(function (item) { return htmlEncode(item.State); });
            pagedList.addColumn("Ready", "@Html.T("Ready")")
                .itemToHtml(function (item) { return item.Ready; });
            pagedList.addButton("Edit", "@Html.T("Edit")", "btn btn-primary btn-sm")
                .showIf(function (item) { return item.MQTTClientId != null; })
                .onclick(function (item) { editMQTTProperty(item); });

            pagedList.refresh();

            CortexxCoreHubInstance.onDataChanged(['DeviceController'], $('#recordsList').get(0), function () {
                pagedList.refresh();
            });
        });
    }

</script>